#!/usr/bin/env python3
from sys import argv
from re import compile, IGNORECASE, finditer
from time import process_time as time


REGEX = {
    "X": {
        0: compile(r"xo+\.", IGNORECASE),
        1: compile(r"\.o+x", IGNORECASE)
    },
    "O": {
        0: compile(r"ox+\.", IGNORECASE),
        1: compile(r"\.x+o", IGNORECASE)
    }
}
ALL_CONSTRAINTS = [[0, 1, 2, 3, 4, 5, 6, 7], [0, 8, 16, 24, 32, 40, 48, 56], [0, 9, 18, 27, 36, 45, 54, 63], [0, 1, 2, 3, 4, 5, 6, 7], [1, 9, 17, 25, 33, 41, 49, 57], [1, 10, 19, 28, 37, 46, 55], [0, 1, 2, 3, 4, 5, 6, 7], [2, 10, 18, 26, 34, 42, 50, 58], [2, 11, 20, 29, 38, 47], [2, 9, 16], [0, 1, 2, 3, 4, 5, 6, 7], [3, 11, 19, 27, 35, 43, 51, 59], [3, 12, 21, 30, 39], [3, 10, 17, 24], [0, 1, 2, 3, 4, 5, 6, 7], [4, 12, 20, 28, 36, 44, 52, 60], [4, 13, 22, 31], [4, 11, 18, 25, 32], [0, 1, 2, 3, 4, 5, 6, 7], [5, 13, 21, 29, 37, 45, 53, 61], [5, 14, 23], [5, 12, 19, 26, 33, 40], [0, 1, 2, 3, 4, 5, 6, 7], [6, 14, 22, 30, 38, 46, 54, 62], [6, 13, 20, 27, 34, 41, 48], [0, 1, 2, 3, 4, 5, 6, 7], [7, 15, 23, 31, 39, 47, 55, 63], [7, 14, 21, 28, 35, 42, 49, 56], [8, 9, 10, 11, 12, 13, 14, 15], [0, 8, 16, 24, 32, 40, 48, 56], [8, 17, 26, 35, 44, 53, 62], [8, 9, 10, 11, 12, 13, 14, 15], [1, 9, 17, 25, 33, 41, 49, 57], [0, 9, 18, 27, 36, 45, 54, 63], [2, 9, 16], [8, 9, 10, 11, 12, 13, 14, 15], [2, 10, 18, 26, 34, 42, 50, 58], [1, 10, 19, 28, 37, 46, 55], [3, 10, 17, 24], [8, 9, 10, 11, 12, 13, 14, 15], [3, 11, 19, 27, 35, 43, 51, 59], [2, 11, 20, 29, 38, 47], [4, 11, 18, 25, 32], [8, 9, 10, 11, 12, 13, 14, 15], [4, 12, 20, 28, 36, 44, 52, 60], [3, 12, 21, 30, 39], [5, 12, 19, 26, 33, 40], [8, 9, 10, 11, 12, 13, 14, 15], [5, 13, 21, 29, 37, 45, 53, 61], [4, 13, 22, 31], [6, 13, 20, 27, 34, 41, 48], [8, 9, 10, 11, 12, 13, 14, 15], [6, 14, 22, 30, 38, 46, 54, 62], [5, 14, 23], [7, 14, 21, 28, 35, 42, 49, 56], [8, 9, 10, 11, 12, 13, 14, 15], [7, 15, 23, 31, 39, 47, 55, 63], [15, 22, 29, 36, 43, 50, 57], [16, 17, 18, 19, 20, 21, 22, 23], [0, 8, 16, 24, 32, 40, 48, 56], [16, 25, 34, 43, 52, 61], [2, 9, 16], [16, 17, 18, 19, 20, 21, 22, 23], [1, 9, 17, 25, 33, 41, 49, 57], [8, 17, 26, 35, 44, 53, 62], [3, 10, 17, 24], [16, 17, 18, 19, 20, 21, 22, 23], [2, 10, 18, 26, 34, 42, 50, 58], [0, 9, 18, 27, 36, 45, 54, 63], [4, 11, 18, 25, 32], [16, 17, 18, 19, 20, 21, 22, 23], [3, 11, 19, 27, 35, 43, 51, 59], [1, 10, 19, 28, 37, 46, 55], [5, 12, 19, 26, 33, 40], [16, 17, 18, 19, 20, 21, 22, 23], [4, 12, 20, 28, 36, 44, 52, 60], [2, 11, 20, 29, 38, 47], [6, 13, 20, 27, 34, 41, 48], [16, 17, 18, 19, 20, 21, 22, 23], [5, 13, 21, 29, 37, 45, 53, 61], [3, 12, 21, 30, 39], [7, 14, 21, 28, 35, 42, 49, 56], [16, 17, 18, 19, 20, 21, 22, 23], [6, 14, 22, 30, 38, 46, 54, 62], [4, 13, 22, 31], [15, 22, 29, 36, 43, 50, 57], [16, 17, 18, 19, 20, 21, 22, 23], [7, 15, 23, 31, 39, 47, 55, 63], [5, 14, 23], [23, 30, 37, 44, 51, 58], [24, 25, 26, 27, 28, 29, 30, 31], [0, 8, 16, 24, 32, 40, 48, 56], [24, 33, 42, 51, 60], [3, 10, 17, 24], [24, 25, 26, 27, 28, 29, 30, 31], [1, 9, 17, 25, 33, 41, 49, 57], [16, 25, 34, 43, 52, 61], [4, 11, 18, 25, 32], [24, 25, 26, 27, 28, 29, 30, 31], [2, 10, 18, 26, 34, 42, 50, 58], [8, 17, 26, 35, 44, 53, 62], [5, 12, 19, 26, 33, 40], [24, 25, 26, 27, 28, 29, 30, 31], [3, 11, 19, 27, 35, 43, 51, 59], [0, 9, 18, 27, 36, 45, 54, 63], [6, 13, 20, 27, 34, 41, 48], [24, 25, 26, 27, 28, 29, 30, 31], [4, 12, 20, 28, 36, 44, 52, 60], [1, 10, 19, 28, 37, 46, 55], [7, 14, 21, 28, 35, 42, 49, 56], [24, 25, 26, 27, 28, 29, 30, 31], [5, 13, 21, 29, 37, 45, 53, 61], [2, 11, 20, 29, 38, 47], [15, 22, 29, 36, 43, 50, 57], [24, 25, 26, 27, 28, 29, 30, 31], [6, 14, 22, 30, 38, 46, 54, 62], [3, 12, 21, 30, 39], [23, 30, 37, 44, 51, 58], [24, 25, 26, 27, 28, 29, 30, 31], [7, 15, 23, 31, 39, 47, 55, 63], [4, 13, 22, 31], [31, 38, 45, 52, 59], [32, 33, 34, 35, 36, 37, 38, 39], [0, 8, 16, 24, 32, 40, 48, 56], [32, 41, 50, 59], [4, 11, 18, 25, 32], [32, 33, 34, 35, 36, 37, 38, 39], [1, 9, 17, 25, 33, 41, 49, 57], [24, 33, 42, 51, 60], [5, 12, 19, 26, 33, 40], [32, 33, 34, 35, 36, 37, 38, 39], [2, 10, 18, 26, 34, 42, 50, 58], [16, 25, 34, 43, 52, 61], [6, 13, 20, 27, 34, 41, 48], [32, 33, 34, 35, 36, 37, 38, 39], [3, 11, 19, 27, 35, 43, 51, 59], [8, 17, 26, 35, 44, 53, 62], [7, 14, 21, 28, 35, 42, 49, 56], [32, 33, 34, 35, 36, 37, 38, 39], [4, 12, 20, 28, 36, 44, 52, 60], [0, 9, 18, 27, 36, 45, 54, 63], [15, 22, 29, 36, 43, 50, 57], [32, 33, 34, 35, 36, 37, 38, 39], [5, 13, 21, 29, 37, 45, 53, 61], [1, 10, 19, 28, 37, 46, 55], [23, 30, 37, 44, 51, 58], [32, 33, 34, 35, 36, 37, 38, 39], [6, 14, 22, 30, 38, 46, 54, 62], [2, 11, 20, 29, 38, 47], [31, 38, 45, 52, 59], [32, 33, 34, 35, 36, 37, 38, 39], [7, 15, 23, 31, 39, 47, 55, 63], [3, 12, 21, 30, 39], [39, 46, 53, 60], [40, 41, 42, 43, 44, 45, 46, 47], [0, 8, 16, 24, 32, 40, 48, 56], [40, 49, 58], [5, 12, 19, 26, 33, 40], [40, 41, 42, 43, 44, 45, 46, 47], [1, 9, 17, 25, 33, 41, 49, 57], [32, 41, 50, 59], [6, 13, 20, 27, 34, 41, 48], [40, 41, 42, 43, 44, 45, 46, 47], [2, 10, 18, 26, 34, 42, 50, 58], [24, 33, 42, 51, 60], [7, 14, 21, 28, 35, 42, 49, 56], [40, 41, 42, 43, 44, 45, 46, 47], [3, 11, 19, 27, 35, 43, 51, 59], [16, 25, 34, 43, 52, 61], [15, 22, 29, 36, 43, 50, 57], [40, 41, 42, 43, 44, 45, 46, 47], [4, 12, 20, 28, 36, 44, 52, 60], [8, 17, 26, 35, 44, 53, 62], [23, 30, 37, 44, 51, 58], [40, 41, 42, 43, 44, 45, 46, 47], [5, 13, 21, 29, 37, 45, 53, 61], [0, 9, 18, 27, 36, 45, 54, 63], [31, 38, 45, 52, 59], [40, 41, 42, 43, 44, 45, 46, 47], [6, 14, 22, 30, 38, 46, 54, 62], [1, 10, 19, 28, 37, 46, 55], [39, 46, 53, 60], [40, 41, 42, 43, 44, 45, 46, 47], [7, 15, 23, 31, 39, 47, 55, 63], [2, 11, 20, 29, 38, 47], [47, 54, 61], [48, 49, 50, 51, 52, 53, 54, 55], [0, 8, 16, 24, 32, 40, 48, 56], [6, 13, 20, 27, 34, 41, 48], [48, 49, 50, 51, 52, 53, 54, 55], [1, 9, 17, 25, 33, 41, 49, 57], [40, 49, 58], [7, 14, 21, 28, 35, 42, 49, 56], [48, 49, 50, 51, 52, 53, 54, 55], [2, 10, 18, 26, 34, 42, 50, 58], [32, 41, 50, 59], [15, 22, 29, 36, 43, 50, 57], [48, 49, 50, 51, 52, 53, 54, 55], [3, 11, 19, 27, 35, 43, 51, 59], [24, 33, 42, 51, 60], [23, 30, 37, 44, 51, 58], [48, 49, 50, 51, 52, 53, 54, 55], [4, 12, 20, 28, 36, 44, 52, 60], [16, 25, 34, 43, 52, 61], [31, 38, 45, 52, 59], [48, 49, 50, 51, 52, 53, 54, 55], [5, 13, 21, 29, 37, 45, 53, 61], [8, 17, 26, 35, 44, 53, 62], [39, 46, 53, 60], [48, 49, 50, 51, 52, 53, 54, 55], [6, 14, 22, 30, 38, 46, 54, 62], [0, 9, 18, 27, 36, 45, 54, 63], [47, 54, 61], [48, 49, 50, 51, 52, 53, 54, 55], [7, 15, 23, 31, 39, 47, 55, 63], [1, 10, 19, 28, 37, 46, 55], [56, 57, 58, 59, 60, 61, 62, 63], [0, 8, 16, 24, 32, 40, 48, 56], [7, 14, 21, 28, 35, 42, 49, 56], [56, 57, 58, 59, 60, 61, 62, 63], [1, 9, 17, 25, 33, 41, 49, 57], [15, 22, 29, 36, 43, 50, 57], [56, 57, 58, 59, 60, 61, 62, 63], [2, 10, 18, 26, 34, 42, 50, 58], [40, 49, 58], [23, 30, 37, 44, 51, 58], [56, 57, 58, 59, 60, 61, 62, 63], [3, 11, 19, 27, 35, 43, 51, 59], [32, 41, 50, 59], [31, 38, 45, 52, 59], [56, 57, 58, 59, 60, 61, 62, 63], [4, 12, 20, 28, 36, 44, 52, 60], [24, 33, 42, 51, 60], [39, 46, 53, 60], [56, 57, 58, 59, 60, 61, 62, 63], [5, 13, 21, 29, 37, 45, 53, 61], [16, 25, 34, 43, 52, 61], [47, 54, 61], [56, 57, 58, 59, 60, 61, 62, 63], [6, 14, 22, 30, 38, 46, 54, 62], [8, 17, 26, 35, 44, 53, 62], [56, 57, 58, 59, 60, 61, 62, 63], [7, 15, 23, 31, 39, 47, 55, 63], [0, 9, 18, 27, 36, 45, 54, 63]]
NEIGHBORS = {0: {8, 1}, 1: {0, 9, 2}, 2: {1, 10, 3}, 3: {2, 11, 4}, 4: {3, 12, 5}, 5: {4, 13, 6}, 6: {5, 14, 7}, 7: {6, 15}, 8: {16, 0, 9}, 9: {8, 17, 10, 1}, 10: {11, 9, 18, 2}, 11: {3, 10, 19, 12}, 12: {13, 11, 20, 4}, 13: {5, 12, 21, 14}, 14: {15, 13, 22, 6}, 15: {7, 14, 23}, 16: {24, 8, 17}, 17: {16, 25, 18, 9}, 18: {19, 17, 26, 10}, 19: {11, 18, 27, 20}, 20: {21, 19, 28, 12}, 21: {13, 20, 29, 22}, 22: {23, 21, 30, 14}, 23: {15, 22, 31}, 24: {32, 16, 25}, 25: {24, 33, 26, 17}, 26: {27, 25, 34, 18}, 27: {19, 26, 35, 28}, 28: {29, 27, 36, 20}, 29: {21, 28, 37, 30}, 30: {31, 29, 38, 22}, 31: {23, 30, 39}, 32: {40, 24, 33}, 33: {32, 41, 34, 25}, 34: {35, 42, 26, 33}, 35: {27, 34, 43, 36}, 36: {35, 37, 44, 28}, 37: {29, 36, 45, 38}, 38: {37, 39, 46, 30}, 39: {31, 38, 47}, 40: {48, 41, 32}, 41: {40, 49, 42, 33}, 42: {41, 50, 43, 34}, 43: {35, 42, 51, 44}, 44: {43, 52, 45, 36}, 45: {37, 44, 53, 46}, 46: {38, 45, 54, 47}, 47: {39, 46, 55}, 48: {56, 49, 40}, 49: {48, 57, 50, 41}, 50: {49, 58, 51, 42}, 51: {43, 50, 59, 52}, 52: {51, 60, 53, 44}, 53: {45, 52, 61, 54}, 54: {46, 53, 62, 55}, 55: {47, 54, 63}, 56: {48, 57}, 57: {56, 49, 58}, 58: {57, 50, 59}, 59: {58, 51, 60}, 60: {59, 52, 61}, 61: {60, 53, 62}, 62: {61, 54, 63}, 63: {62, 55}}

def possible_moves(pzl, piece):
    possible = []
    p = {}
    for constraint in ALL_CONSTRAINTS:
        con = "".join(pzl[x] for x in constraint)
        if piece not in {*con}:
            continue
        possible += [(constraint[x.end()-1],[constraint[i] for i in range(x.span()[0], x.span()[1])]) for x in finditer(REGEX[piece][0], con) if pzl[constraint[x.end()-1]] == '.']
        possible += [(constraint[x.start()],[constraint[i] for i in range(x.span()[0], x.span()[1])]) for x in finditer(REGEX[piece][1], con) if pzl[constraint[x.start()]] == '.']
    for i in possible:
        if i[0] in p:
            p[i[0]].update(i[1])
        else:
            p[i[0]] = {*i[1]}
    return p


def best_move(board, moves, piece):
    print("My move is {0}".format([*moves.keys()][0]))
    print("My move is {0}".format(max(moves, key=lambda x: len(board[x]))))
    if 0 in moves:
        print("My move is 0")
        return
    elif 7 in moves:
        print("My move is 7")
        return
    elif 56 in moves:
        print("My move is 56")
        return
    elif 63 in moves:
        print("My move is 63")
        return
    else:
        print("My move is {0}".format(min(moves.keys(), key=lambda x: len([board[i] for i in NEIGHBORS[x] if board[i] == '.']))))

    print("My move is {0}".format(min(moves, key=lambda x: len(possible_moves(place(board, piece, moves[x]), 'X' if piece == 'O' else 'O')))))


def place(pzl, piece, index):
    tmp = pzl[:]
    for i in index: 
        tmp[i] = piece
    return tmp


def main():
    board, piece = ([*argv[2].upper()], argv[1].upper()) if len(argv[2]) == 64 else ([*argv[1].upper()], argv[2].upper())
    possible = possible_moves(board, piece)
    if len(possible) > 0:
        best_move(board, possible, piece)


if __name__ == "__main__":
    start = time()
    main()
    #print("{0}".format(time()-start))
